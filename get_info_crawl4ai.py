import os
import asyncio
import json
from crawl4ai import AsyncWebCrawler
from crawl4ai.extraction_strategy import LLMExtractionStrategy
from pydantic import BaseModel, Field
from typing import Optional


class StockInfo(BaseModel):
    papel: str = Field(..., description="C√≥digo da a√ß√£o")
    cotacao: str = Field(..., description="Cota√ß√£o atual da a√ß√£o")
    tipo: str = Field(..., description="Tipo de a√ß√£o")
    data_ultima_cotacao: str = Field(..., description="Data da √∫ltima cota√ß√£o")
    empresa: str = Field(..., description="Nome da empresa")
    setor: str = Field(..., description="Setor da empresa")
    subsetor: str = Field(..., description="Subsetor da empresa")

    valor_mercado: str = Field(..., description="Valor de mercado")
    valor_firma: str = Field(..., description="Valor da firma")
    numero_acoes: str = Field(..., description="N√∫mero de a√ß√µes")

    oscilacoes: Optional[dict] = Field(None, description="Oscila√ß√µes da a√ß√£o")

    indicadores_fundamentalistas: Optional[dict] = Field(None, description="Indicadores fundamentalistas")

    balanco_patrimonial: Optional[dict] = Field(None, description="Dados do Balan√ßo Patrimonial")

    demonstrativos_resultados: Optional[dict] = Field(None, description="Demonstrativos de Resultados")


async def extract_stock_info(url: str):
    async with AsyncWebCrawler(verbose=True) as crawler:
        result = await crawler.arun(
            url=url,
            word_count_threshold=1,
            extraction_strategy=LLMExtractionStrategy(
                provider=os.getenv('CRAWL4AI_MODEL_PROVIDER'), # 'ollama/llama3.1:8b-8k'
                url_base=os.getenv('CRAWL4AI_MODEL_URL_BASE'), # 'http://localhost:11434'
                api_token=os.getenv('CRAWL4AI_MODEL_API_KEY'), # 'token'
                schema=StockInfo.schema(),
                extraction_type="schema",
                instruction="""Extraia todas as informa√ß√µes da p√°gina de a√ß√µes, preenchendo todos os campos poss√≠veis. 
                Organize as informa√ß√µes nos campos do modelo, incluindo:
                - Informa√ß√µes b√°sicas da a√ß√£o
                - Valor de mercado e da firma
                - Oscila√ß√µes
                - Indicadores fundamentalistas
                - Dados do Balan√ßo Patrimonial
                - Demonstrativos de Resultados

                Certifique-se de incluir dados num√©ricos e textuais relevantes.
                Use nomes claros nos campos extra√≠dos, em especial indicadores_fundamentalistas."""
            ),
            bypass_cache=True,
        )
        return result.extracted_content


def format_complementary_stock_info(stock_data):
    """
    Formata dados complementares de a√ß√µes de forma flex√≠vel.

    Args:
        stock_data (list): Lista de dicion√°rios com informa√ß√µes da a√ß√£o

    Returns:
        str: Relat√≥rio formatado com informa√ß√µes complementares
    """
    if not stock_data or not isinstance(stock_data, list):
        return "Nenhum dado dispon√≠vel"

    # Pega o primeiro elemento (assumindo que √© um √∫nico registro)
    data = stock_data[0]

    # Fun√ß√£o auxiliar para formatar valores monet√°rios
    def format_currency(value):
        try:
            return f"R$ {float(str(value).replace('.', '').replace(',', '.')):,.2f}"
        except (ValueError, TypeError):
            return value

    # Fun√ß√£o auxiliar para extrair dados de forma segura
    def safe_get(dictionary, key, default='N/A'):
        return dictionary.get(key, default)

    # Preparando o relat√≥rio complementar
    report = f"""üìä Informa√ß√µes Complementares - {safe_get(data, 'papel', default='A√ß√£o')}

üè¢ Detalhes da Empresa
- Empresa: {safe_get(data, 'empresa', default='N/A')}
- Setor: {safe_get(data, 'setor', default='N/A')}
- Subsetor: {safe_get(data, 'subsetor', default='N/A')}

üíπ Cota√ß√£o e Mercado
- Cota√ß√£o Atual: {safe_get(data, 'cotacao', default='N/A')}
- Data √öltima Cota√ß√£o: {safe_get(data, 'data_ultima_cotacao', default='N/A')}
- Valor de Mercado: {format_currency(safe_get(data, 'valor_mercado', default=0))}
- N√∫mero de A√ß√µes: {safe_get(data, 'numero_acoes', default='N/A')}

üìà Oscila√ß√µes
"""

    # Adiciona oscila√ß√µes de forma din√¢mica
    oscilacoes = safe_get(data, 'oscilacoes', default={})
    for periodo, valor in oscilacoes.items():
        report += f"- {periodo.replace('_', ' ').title()}: {valor}\n"

    report += "\nüìä Indicadores Fundamentalistas\n"

    # Adiciona indicadores fundamentalistas de forma din√¢mica
    indicadores = safe_get(data, 'indicadores_fundamentalistas', default={})
    for indicador, valor in indicadores.items():
        report += f"- {indicador.upper().replace('_', ' ')}: {valor}\n"

    report += "\nüí∞ Balan√ßo Patrimonial\n"

    # Adiciona balan√ßo patrimonial de forma din√¢mica
    balanco = safe_get(data, 'balanco_patrimonial', default={})
    for conta, valor in balanco.items():
        report += f"- {conta.replace('_', ' ').title()}: {format_currency(valor)}\n"

    report += "\nüìà Demonstrativos de Resultados\n"

    # Adiciona demonstrativos de resultados para diferentes per√≠odos
    resultados = safe_get(data, 'demonstrativos_resultados', default={})
    periodos = {
        '12 meses': ['receita_liq_ultimos_12_meses', 'ebit_ultimos_12_meses', 'lucro_liq_ultimos_12_meses'],
        '3 meses': ['receita_liq_ultimos_3_meses', 'ebit_ultimos_3_meses', 'lucro_liq_ultimos_3_meses']
    }

    for periodo, campos in periodos.items():
        report += f"\nPer√≠odo: {periodo}\n"
        for campo in campos:
            nome_formatado = campo.replace('_', ' ').replace('liq', 'l√≠quido').title()
            report += f"- {nome_formatado}: {format_currency(resultados.get(campo, 'N/A'))}\n"

    return report


def get_complementary_data(ticker):
    """
    Obt√©m e prepara dados de an√°lise de a√ß√µes do Fundamentus.
    Encapsula a l√≥gica ass√≠ncrona em uma fun√ß√£o s√≠ncrona.

    Args:
        ticker (str): C√≥digo da a√ß√£o (ex: "SLCE3")

    Returns:
        str: Dados formatados da a√ß√£o
    """

    async def _async_get_data(ticker):
        url = f"https://fundamentus.com.br/detalhes.php?papel={ticker}"
        fundamentus_data = await extract_stock_info(url)
        fundamentus_json = json.loads(fundamentus_data)
        return format_complementary_stock_info(fundamentus_json)

    # Executa a fun√ß√£o ass√≠ncrona e retorna o resultado
    return asyncio.run(_async_get_data(ticker))
